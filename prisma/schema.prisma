// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String            @id @default(uuid())
    name           String
    email          String?           @unique
    password       String?
    emailVerified  DateTime?         @map("email_verified")
    image          String?
    college        College           @relation(fields: [collegeId], references: [id])
    createdAt      DateTime          @default(now())
    updatedAt      DateTime          @updatedAt
    accounts       Account[]
    sessions       Session[]
    collegeId      String
    assignedStock  StockAllocation[] @relation("stockHistoryAllocatedTo")
    allocatedStock StockAllocation[] @relation("stockHistoryAllocatedBy")

    @@map("users")
}

model Account {
    id                String   @id @default(cuid())
    userId            String   @map("user_id")
    type              String?
    provider          String
    providerAccountId String   @map("provider_account_id")
    token_type        String?
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    scope             String?
    id_token          String?  @db.Text
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    userId       String?  @map("user_id")
    sessionToken String   @unique @map("session_token") @db.Text
    accessToken  String?  @map("access_token") @db.Text
    expires      DateTime
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@map("sessions")
}

model VerificationRequest {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}

model College {
    id        String   @id @default(cuid())
    name      String
    address   String
    location  Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    users        User[]
    stock        Stock[]
    stockHistory StockAllocation[]

    @@map("colleges")
}

model Resource {
    id              String       @id @default(cuid())
    isbn            String       @unique
    title           String
    description     String?
    author          String
    publicationName String?
    edition         String?
    publishedYear   DateTime?
    language        String
    genre           String
    type            ResourceType
    isDigital       Boolean
    meta            Json
    tags            String[]
    trendIndex      Int          @default(0)
    coverImage      String?      @default("/default_book.png")
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt

    stockHistory StockAllocation[]
    stock        Stock[]

    @@map("resources")
}

enum ResourceType {
    Book
    Pdf
}

model Stock {
    id          String   @id @default(cuid())
    resource    Resource @relation(fields: [resourceId], references: [id])
    college     College  @relation(fields: [collegeId], references: [id])
    libLocation String
    quantity    Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    resourceId      String
    collegeId       String
    stockAllocation StockAllocation[]
}

model StockAllocation {
    id             String                @id @default(cuid())
    stock          Stock                 @relation(fields: [stockId], references: [id])
    status         StockAllocationStatus
    quantity       Int
    startDate      DateTime?
    endDate        DateTime?
    otp            String?
    allocatedTo    User                  @relation("stockHistoryAllocatedTo", fields: [allocatedToId], references: [id])
    allocatedBy    User?                 @relation("stockHistoryAllocatedBy", fields: [allocatedById], references: [id])
    remark         String?
    createdAt      DateTime              @default(now())
    updatedAt      DateTime              @updatedAt
    otpGeneratedAt DateTime?

    allocatedToId          String
    allocatedById          String?
    stockId                String
    college                College?                 @relation(fields: [collegeId], references: [id])
    collegeId              String?
    resource               Resource?                @relation(fields: [resourceId], references: [id])
    resourceId             String?
    StockAllocationHistory StockAllocationHistory[]

    @@map("stockAllocation")
}

model StockAllocationHistory {
    id              String                @id @default(cuid())
    action          StockAllocationStatus
    stockAllocation StockAllocation       @relation(fields: [stockAllocationId], references: [id])
    createdAt       DateTime              @default(now())
    updatedAt       DateTime              @updatedAt

    stockAllocationId String
}

enum StockHistoryType {
    In
    Out
}

enum StockAllocationStatus {
    Registered
    Approved
    Rejected
    Returned
    Overdue
}
